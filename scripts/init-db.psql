CREATE EXTENSION IF NOT EXISTS postgis;

-- ======================================
-- 1. Create Table: preferences
-- ======================================
CREATE TABLE preferences (
  id SERIAL PRIMARY KEY,
  min_age INT,
  max_age INT,
  gender_preference INT,
  max_distance FLOAT,
  type INT
);

-- ======================================
-- 2. Create Table: interests
-- ======================================
CREATE TABLE interests (
  id SERIAL PRIMARY KEY,
  description VARCHAR(255),
  importance INT
);

-- ======================================
-- 3. Create Table: user_profiles
--    One-to-one relationship with preferences (via preference_id)
--    'location' uses PostGIS geography type with SRID=4326 (point)
-- ======================================
CREATE TABLE user_profiles (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  surname VARCHAR(255),
  location geography(Point, 4326), -- PostGIS type
  bio TEXT,
  rarity INT,
  currency INT,
  preference_id INT UNIQUE, -- Unique for one-to-one
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  CONSTRAINT fk_userprofiles_preferences
    FOREIGN KEY (preference_id)
    REFERENCES preferences (id)
);

-- ======================================
-- 4. Create Table: prompts
-- ======================================
CREATE TABLE prompts (
  id SERIAL PRIMARY KEY,
  description VARCHAR(255),
  theme VARCHAR(255)
);

-- ======================================
-- 5. Create Table: preferences_interests
--    Many-to-one to preferences
--    Many-to-one to interests
-- ======================================
CREATE TABLE preferences_interests (
  id SERIAL PRIMARY KEY,
  preference_id INT NOT NULL,
  interest_id INT NOT NULL,
  CONSTRAINT fk_prefsint_preferences
    FOREIGN KEY (preference_id)
    REFERENCES preferences (id),
  CONSTRAINT fk_prefsint_interests
    FOREIGN KEY (interest_id)
    REFERENCES interests (id)
);

-- ======================================
-- 6. Create Table: profile_prompts
--    One-to-many from user_profiles.id
--    One-to-many from prompts.id
-- ======================================
CREATE TABLE profile_prompts (
  id SERIAL PRIMARY KEY,
  prompt_id INT NOT NULL,
  user_id INT NOT NULL,
  answer VARCHAR(255),
  displayed BOOLEAN,
  CONSTRAINT fk_profileprompts_prompt
    FOREIGN KEY (prompt_id)
    REFERENCES prompts (id),
  CONSTRAINT fk_profileprompts_user
    FOREIGN KEY (user_id)
    REFERENCES user_profiles (id)
);

-- ======================================
-- 7. Create Table: chats
--    One-to-many from user_profiles.id (user1_id, user2_id)
-- ======================================
CREATE TABLE chats (
  id SERIAL PRIMARY KEY,
  user1_id INT NOT NULL,
  user2_id INT NOT NULL,
  matched_at TIMESTAMP,
  CONSTRAINT fk_chats_user1
    FOREIGN KEY (user1_id)
    REFERENCES user_profiles (id),
  CONSTRAINT fk_chats_user2
    FOREIGN KEY (user2_id)
    REFERENCES user_profiles (id)
);

-- ======================================
-- 8. Create Table: booster
--    Many-to-one to user_profiles (via user_id)
--    pack_ids is VARCHAR, no strict FK to user_profiles.id
-- ======================================
CREATE TABLE booster (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  pack_ids VARCHAR(255),
  created_at TIMESTAMP,
  CONSTRAINT fk_booster_user
    FOREIGN KEY (user_id)
    REFERENCES user_profiles (id)
);

-- ======================================
-- 9. Create Table: swipes
--    One-to-many from user_profiles.id (swiper_id, swiped_id)
-- ======================================
CREATE TABLE swipes (
  id SERIAL PRIMARY KEY,
  swiper_id INT NOT NULL,
  swiped_id INT NOT NULL,
  choice INT,
  created_at TIMESTAMP,
  CONSTRAINT fk_swipes_swiper
    FOREIGN KEY (swiper_id)
    REFERENCES user_profiles (id),
  CONSTRAINT fk_swipes_swiped
    FOREIGN KEY (swiped_id)
    REFERENCES user_profiles (id)
);

-- ======================================
-- End of schema
-- ======================================

/*
  Additional Notes:
  1. If you need user_profiles <-> preferences to be one-to-many,
     remove the UNIQUE constraint on user_profiles.preference_id.
  2. If pack_ids references an actual "packs" table, consider storing
     them in a separate table with a proper FK, rather than a varchar field.
*/
